// prisma/schema.prisma

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Specifies the database connection details
datasource db {
  // Provider: Make sure this matches your chosen database!
  // "postgresql" for Supabase, Vercel Postgres, or standard PostgreSQL.
  // "mysql" for PlanetScale or standard MySQL.
  // "sqlite" for local development
  provider = "postgresql" // Adjust if necessary
  // URL: Loads the connection string from the .env file.
  url      = env("DATABASE_URL")
}

// Configures the Prisma Client generator
generator client {
  provider = "prisma-client-js"
}

// --- Define your database models below this line ---

// Model representing the User table (Optional - for future use)
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations (only if you want to enforce foreign keys)
  // habits        Habit[]
  // categories    Category[]
}

// --- NEW: Category Model ---
model Category {
  id        String   @id @default(cuid())
  name      String   // Name of the category (e.g., "Health", "Work", "Mindfulness")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User association (without foreign key constraint for now)
  userId String

  // Relation to Habit (One-to-Many: One category can have many habits)
  habits Habit[]

  // Ensure category names are unique per user
  @@unique([userId, name])
  @@index([userId])
}

// Model representing the Habit table (Updated with Category support)
model Habit {
  id            String    @id @default(cuid())
  userId        String    // Store user ID directly (no foreign key constraint)
  name          String
  description   String?
  frequency     String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // --- NEW: Category Relation (Optional) ---
  categoryId    String?   // Optional foreign key to Category
  category      Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  // Relation to HabitRecord
  records       HabitRecord[]

  // Database Indexes
  @@index([userId])
  @@index([categoryId])
}

// Model representing the HabitRecord table (No changes)
model HabitRecord {
  id            String    @id @default(cuid())
  habitId       String
  habit         Habit     @relation(fields: [habitId], references: [id], onDelete: Cascade)
  date          DateTime
  completed     Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([habitId])
  @@unique([habitId, date])
}
